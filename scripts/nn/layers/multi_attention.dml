
#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

source("nn/layers/softmax.dml") as softmax
source("nn/layers/dropout.dml") as dropout
source("scripts/nn/util.dml") as util


forward = function(matrix[double] Q, matrix[double] K,
      matrix[double] V, int H, int T, int D, double dropout_p)
    return (matrix[double] context, matrix[double] attention) {
  /*
   * Computes the forward pass for a multi-head attention layer.
   *
   * Inputs (B: Batch size, T: Sequence length, D: Embedding length, H: Heads):
   * - query: Input querys of shape (B,T*H*D).
   * - key: Input keys of shape (B,T*H*D).
   * - value: Input values of shape (B,T*H*D).
   * - H: Head count.
   * - T: Sequence length.
   * - D: Embedding length of single query, value, key,
   * -
   * Outputs:
   * - context: Token context embeddings, of shape (B, T*H*D)
   * - attention: Attention on value(s) for given query(s), of shape (B, H*T*T).
   */
  B = nrow(Q)

  # Transpose head and token dimension for per-head computation
  Q = util::transpose_ABCD_to_ACBD(Q, T, H)  # Shape (B, H*T*D)
  K = util::transpose_ABCD_to_ACBD(K, T, H)  # Shape (B, H*T*D)
  V = util::transpose_ABCD_to_ACBD(V, T, H)  # Shape (B, H*T*D)

  attention = matrix(0, rows=B, cols=H*T*T)
  context = matrix(0, rows=B, cols=H*T*D)
  norm = 1/sqrt(D)
  K_norm = K / sqrt(D)

  # For loops for tensor operations
  for (batch in 1:B) {
    attention_probs_b = matrix(0, rows=H, cols=T*T)
    context_b = matrix(0, rows=H, cols=T*D)
    Q_b = matrix(Q[batch], rows=H, cols=T*D)
    K_norm_b = matrix(K_norm[batch], rows=H, cols=T*D)
    V_b = matrix(V[batch], rows=H, cols=T*D)

    for (head in 1:H) {
      Q_h = matrix(Q_b[head], rows=T, cols=D)
      K_norm_h = matrix(K_norm_b[head], rows=T, cols=D)
      V_h = matrix(V_b[head], rows=T, cols=D)

      attention_scores = Q_h %*% t(K_norm_h)  # Shape (T, T)
      
      # TODO: Add support for attention mask here
      
      # Column-wise softmax
      attention_probs_h = softmax::forward(attention_scores)

      [attention_probs_h, dropout_mask] = dropout::forward(attention_probs_h, dropout_p, -1)

      context_h = attention_probs_h %*% V_h  # Shape (T, D)

      attention_probs_b[head] = matrix(attention_probs_h, rows=1, cols=T*T)
      context_b[head] = matrix(context_h, rows=1, cols=T*D)
    }

    attention[batch] = matrix(attention_probs_b, rows=1, cols=H*T*T)
    context[batch] = matrix(context_b, rows=1, cols=H*T*D)
  }

  # Swap head and token dimension for original shape
  context = util::transpose_ABCD_to_ACBD(context, H, T)
}

B = 2
H = 3
T = 4
D = 5

Q = matrix(seq(1, B*H*T*D), rows=B, cols=H*T*D)
K = matrix(seq(1, B*H*T*D), rows=B, cols=H*T*D)
V = matrix(seq(1, B*H*T*D), rows=B, cols=H*T*D)
dropout_p = 0.1

[context, attention] = forward(Q, K, V, H, T, D, dropout_p)
print(toString(context))
print(toString(attention))