#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

source("scripts/nn/networks/resnet.dml") as resnet
source("src/test/scripts/applications/nn/util.dml") as test_util

basic_test_basic_block_forward = function(int C_in, int C_base, int strideh, int stridew,
                                          int Hin, int Win, int N, Boolean downsample) {
    /*
     * Basic input tests for basic_block_forward() function
     */
    X = matrix(0, rows=N, cols=C_in*Hin*Win)
    W_conv1 = matrix(1, rows=C_base, cols=C_in*3*3)
    gamma_bn1 = matrix(1, rows=C_base, cols=1)
    beta_bn1 = matrix(0, rows=C_base, cols=1)
    W_conv2 = matrix(0, rows=C_base, cols=C_base*3*3)
    gamma_bn2 = matrix(1, rows=C_base, cols=1)
    beta_bn2 = matrix(0, rows=C_base, cols=1)
    weights = list(W_conv1, gamma_bn1, beta_bn1, W_conv2, gamma_bn2, beta_bn2)
    if (downsample) {
        W_conv3 = matrix(0, rows=C_base, cols=C_in*1*1)
        gamma_bn3 = matrix(1, rows=C_base, cols=1)
        beta_bn3 = matrix(0, rows=C_base, cols=1)
        weights = append(weights, W_conv3)
        weights = append(weights, gamma_bn3)
        weights = append(weights, beta_bn3)
    }


    mode = "train"
    ema_mean_bn1 = matrix(0, rows=C_base, cols=1)
    ema_var_bn1 = matrix(1, rows=C_base, cols=1)
    ema_mean_bn2 = matrix(0, rows=C_base, cols=1)
    ema_var_bn2 = matrix(1, rows=C_base, cols=1)
    ema_means_vars = list(ema_mean_bn1, ema_var_bn1, ema_mean_bn2, ema_var_bn2)
    if (downsample) {
        ema_mean_bn3 = matrix(0, rows=C_base, cols=1)
        ema_var_bn3 = matrix(1, rows=C_base, cols=1)
        ema_means_vars = append(ema_means_vars, ema_mean_bn3)
        ema_means_vars = append(ema_means_vars, ema_var_bn3)
    }

    [out, Hout, Wout, ema_means_vars_up] = resnet::basic_block_forward(X, weights, C_in, C_base, Hin, Win,
                                                                    strideh, stridew, mode, ema_means_vars)
    Hout_expected = Hin / strideh; Wout_expected = Win / strideh
    out_cols_expected = C_base * Hout_expected * Wout_expected
    if (Hout_expected != Hout | Wout_expected != Wout | out_cols_expected != ncol(out)) {
        test_util::fail("Output shapes of basic_block_forward() are not as expected!")
        test_util::fail("Output shapes of basic_block_forward() are not as expected!")
    }
}

/*
 * Test case 1:
 * Basic block forward computation shouldn't raise errors
 * when given valid inputs with valid shapes without having
 * to downsample the input and the output should have the
 * expected shape.
 */
basic_test_basic_block_forward(C_in=4, C_base=4, strideh=1, stridew=1, Hin=4, Win=4, N=3, downsample=FALSE)

/*
 * Test case 2:
 * Basic block forward computation shouldn't raise errors
 * when given valid inputs with having to downsample inputs
 * because of non-matching channels and the output should
 * have the expected (downsampled) shapes.
 */
basic_test_basic_block_forward(C_in=2, C_base=4, strideh=1, stridew=1, Hin=4, Win=4, N=3, downsample=TRUE)

/*
 * Test case 3:
 * Basic block forward computation shouldn't raise errors
 * when given valid inputs with having to downsample inputs
 * because of stride bigger than 1 and the output should
 * have the expected (downsampled) shapes.
 */
basic_test_basic_block_forward(C_in=4, C_base=4, strideh=2, stridew=2, Hin=4, Win=4, N=3, downsample=TRUE)
